package com.example.internship_21_5_24

data class UnlockTechniquesData(
    val title: String,
    val info: String,
    val id: Int
)

val UnlockTechDataList = listOf(
    UnlockTechniquesData("Unlock By Software", "In this information you will learn who to unlock the lock of mobile or device.", 1),
    UnlockTechniquesData("Unlock With Tricks", "In this information you will learn who to unlock the lock of mobile or device.",2),
    UnlockTechniquesData("SIM Unlock", "In this information you will learn who to unlock the lock of mobile or device.",3),
    UnlockTechniquesData("Unlock Network of your Phone", "In this information you will learn who to unlock the lock of mobile or device.",4),
)

val UnlockBySoftwareList = listOf(
    UnlockTechniquesData("Tool Lab UnlockGo", "In this information you will learn how to unlock the lock of mobile or device.",1),
    UnlockTechniquesData("Pass Fab Android Unlocker", "In this information you will learn how to unlock the lock of mobile or device.",2),
    UnlockTechniquesData("Android Boot loader Unlocker", "In this information you will learn how to unlock the lock of mobile or device.",3),
    UnlockTechniquesData("Sky Soft Toolbox for Android", "In this information you will learn how to unlock the lock of mobile or device.",4),
    UnlockTechniquesData("Unlock Phone", "In this information you will learn how to unlock the lock of mobile or device.",5),
    UnlockTechniquesData("iMyFone LockWiper", "In this information you will learn how to unlock the lock of mobile or device.",6),
    UnlockTechniquesData("Tenorshare 4u Key for Android", "In this information you will learn how to unlock the lock of mobile or device.",7),

    )

val SimUnlockList = listOf(
    UnlockTechniquesData("Android SIM Unlock", "This information you will learn how to unlock the lock of mobile device.",1),
    UnlockTechniquesData("Galax SIM Unlock", "This information you will learn how to unlock the lock of mobile device.",2),
    UnlockTechniquesData("Samsung SIM Unlock", "This information you will learn how to unlock the lock of mobile device.",3),
    UnlockTechniquesData("HTC SIM Unlock", "This information you will learn how to unlock the lock of mobile device.",4),
    UnlockTechniquesData("SIM Unlock with App", "This information you will learn how to unlock the lock of mobile device.",5),
)

val UnlockWithTricksList = listOf(
    UnlockTechniquesData("Unlock a Verizon Phone", "In this information you will learn how to unlock the lock of mobile device.",1),
    UnlockTechniquesData("Unlock Kitkat and Early Version", "In this information you will learn how to unlock the lock of mobile device.",1),
    UnlockTechniquesData("Boot into a Safe Mode to bypass Third-Party Lock Screen", "In this information you will learn how to unlock the lock of mobile device.",2),
    UnlockTechniquesData("Crash the Lock Screen UI", "In this information you will learn how to unlock the lock of mobile device.",3),
    UnlockTechniquesData("Factory Reset", "In this information you will learn how to unlock the lock of mobile device.",4),

)

val UnlockNetworkOfYourPhoneList = listOf(
    UnlockTechniquesData("Android Sim Unlock Software", "In this information you will learn how to unlock the lock of mobile device.", 1),
    UnlockTechniquesData("Galaxy Sim Unlock App", "In this information you will learn how to unlock the lock of mobile device.", 2),
    UnlockTechniquesData("Unlock You Phone Fast and Secure", "In this information you will learn how to unlock the lock of mobile device.", 3),
    )

data class BrandNames (
    val name: String
)
val brandNameList = listOf(
    BrandNames("SAMSUNG"),
    BrandNames( "REAlME"),
    BrandNames("INFINIX"),
    BrandNames("LENOVO"),
    BrandNames("BLACKBERRY"),
    BrandNames("MOTOROLA")
)

enum class brandNamesEnum(){
    SAMSUNG,
    INFINIX,
    LENOVO,
    BLACKBERRY,
    MOTOROLA,
    HTC,
    SONY,
    LG,
    OPPO,
    QMOBILE,
    CHINA,
    GENERIC,
    MICROSOFT_WINDOW,
    HUAWEI,
    VIVO,
    ACER,
    XIAOMI,
    NOKIA,
    Tecno,
    ASUS,
    Honor,
    IPHONE,
    RealMe,
    ZTE,
    One_Plus,
    Plam,
    AMOL,
    BQ,
    I_Mobile,
    LEECO,



}

data class SecretCodes(
    val title: String,
    val number: String
)

var str = "*#*#34971539#*#*"
var str2 = "*#872564#"
var str3 = str2
var str4 = "*#*#4636#*#*"
var str5 = "*#*#2222#*#*"
var str6 = "*#*#1111#*#*"
var str7 = "*#*#1234#*#*"
var str8 = "*#*#232331#*#*"
var str9 = "*#*#3264#*#*"
var str10 = "*#*#1472365#*#*"
var str11 = "*#*#232338#*#*"
var str12 = str6
var str13 = str8
var str14 = str9
var str15 = str10
var str16 = str5
var str17 = "*#*#426#*#*"
var str18 = str16
var str19 = str7
var str20: String = str18
var str21 = str4
var str22 = str3
var str23 = str7
var str25 = "Enables SIM lock "
var str26: String = str17
var str27 = "#7465625*746*Code#"
var str28: String = str14
var str29: kotlin.String? = str
var str30 = "*#*#0588#*#*"
var str31 = "*#*#0*#*#*"
var str32: String = str20
var str33: String = str13
var str34 = "*7465625*782*Code#"
var str35: String = str11
var str36: String = str23
var str37: String = str15
var str38: String = str22
var str39 = "*#*#2664#*#*"
var str40 = str31
var str41 = str39
var str42 = str37
var str43 = str28
var str44 = str34
var str45 = str25
var str46 = str31
var str47 = str32
var str48 = str33
var str49 = str36
var str50 = str30
var str51 = str35
var str52 = str39
var str53: String = str12
var str54 = str52
var str55 = "*#*#232339#*#*"
var str56 = str27
var str57: String = str21
var str58 = str55
var str59 = "*#43#"
var str67 = str57
var str60 = str51
var str61 = "*2767*3855#"
var str62 = str53
var str63 = str29!!
var str64 = str47
var str65 = str45
var str66 = str57
var str68 = str48
var str69 = "Display IMEI number."
var str70: String = str65
var str71 = str42
var str72 = "*#06#"
var str73 = str43
var str74 = str56
var str75 = str49
var str76 = str68
var str77 = str69
var str78 = str38
var str79 = str72
var str80: String = str64
var str82 = str59
var str83: String = str62
var str84 = str80
var str85 = str83
var str81 = str59

val secretCodesList_Samsung = listOf(
    SecretCodes("*#06#", "Display IMEI number."),
    SecretCodes("*#0*#", "General Test Mode."),
    SecretCodes("*#12580*369#", "Software & WH info."),
    SecretCodes("*#232337#", "Bluetooth Address Info."),
    SecretCodes("*#0588#", "Proximity Sensor Test Mode."),
    SecretCodes("*#273283*255*3282*#", "Data Create Menu."),
    SecretCodes("*#44336#", "Software Version Info."),
    SecretCodes("*#273283*255*663282*#", "Data Create SD Card."),
    SecretCodes("*#3282*727336*#", "Data Usage Status."),
    SecretCodes("*#232331#", "Bluetooth Test Mode."),
    SecretCodes("*#0782#", "Real Time Clock Test."),
    SecretCodes("*#0283#", "Audio Loopback Control."),
    SecretCodes("*#34971539#", "Camera Firmware Update."),
    SecretCodes("*#0526#", "WLAN Engineering Mode."),
    SecretCodes("*#746#", "Debug Dump Mode."),
    SecretCodes("*#1575#", "GPS Control Menu."),
    SecretCodes("*#3214789650#", "LBS Test Mode."),
    SecretCodes("*#745#", "RIL Dump Menu."),
    SecretCodes("*#03#", "NAND Flash S/N."),
    SecretCodes("*#0842#", "Vibra Motor Test Mode."),
    SecretCodes("*#*#1472365#*#*", "GPS Test Setting."),
    SecretCodes("*#*#197328640#*#*", "Service mode main Menu."),
    SecretCodes("*#0*#", "General Test Mode."),
    SecretCodes("*#0589#", "Light Sensor Test Mode."),
    SecretCodes("*#0673#", "Audio Test Mode."),
    SecretCodes("*#872564#", "USB Logging Control."),
    SecretCodes("*#4238378#", "GCF Configuration."),
    SecretCodes("*#7594#", "Remap Shut Down To End Call Task."),
    SecretCodes("*#0289#", "Melody Test Mode."),
    SecretCodes("*#*#34971539#*#*", "Camera Firmware Menu."),
    SecretCodes("*#80#", "Unknown."),
    SecretCodes("*#3214789#", "GCF Mode Status."),
    SecretCodes("*#272886#", "Auto Answer Selection."),
    SecretCodes("*#232339#", "WLAN Test Mode."),
    SecretCodes("*2767*3855#", "ROM Firmware Default Setting."),
    SecretCodes("*#272*HHMM#", "Change/Display CSS Code."),
    SecretCodes("*2767*4387264636#", "To Display Product Code."),
    SecretCodes("*#272*imei#", "Change/Display CSS Code."),
    SecretCodes("*#2663#", "TPS/TSK Firmware Update."),
    SecretCodes("*#528#", "WLAN Engineering Mode."),
    SecretCodes("*#7412365#", "Camera Firmware Menu."),
    SecretCodes("*#07#", "Test History."),
    SecretCodes("*#8736364#", "OTA Update Menu."),
    SecretCodes("*#301279#", "HSDPA/HSUPA Control menu."),
    SecretCodes("*#7353#", "Quick Test Menu."),
    SecretCodes("*2767*4387264636#", "Sellout SMS/PCODE View."),
    SecretCodes("*#7465625#", "View Phone Lock Status."),
    SecretCodes("*#7284#", "USB I2C Mode Control."),
    SecretCodes("*#232339#", "WLAN Test Mode."),
    SecretCodes("*2767*3855#", "ROM Firmware Default Setting."),
    SecretCodes("*2767*4387264636#", "To Display Product Code."),
    SecretCodes("*#272*imei#", "Change/Display CSS Code."),
    SecretCodes("*#*#3636#*#*", "General Setting Mode."),
    SecretCodes("*#*#7780#*#*", "Factory Soft Reset."),
    SecretCodes("*#*#1472365#*#*", "GPS Test Settings."),
    SecretCodes("*#7465625*782*#", "Configure Network Lock NSp."),
    SecretCodes("*#7465625*27*#", "Insert NetworkLock keycode NSp/CP."),
    SecretCodes("*#232338#", "WLAN MAC Address."),
    SecretCodes("*#272*HHMM#", "Change/Display CSS Code."),
    SecretCodes("*#7465625*77*#", "Insert Operator Lock Keycode."),
    SecretCodes("*7465625*638*#", "Configure Network Lock MCC/MNC."),
    SecretCodes("*#7465625*638*#", "Insert Network Keycode."),
    SecretCodes("*#0228#", "ADC Reading."),
    SecretCodes("*#7465625*27*#", "Insert Content Provider Keycode."),
    SecretCodes("*#7465625*782*#", "Insert Partial Network Lock Keycode."),
    SecretCodes("*#7465625*77*#", "Insert Network Lock Keycode SP."),
    SecretCodes("*#2263#", "RF Band Selection."),
    SecretCodes("*#9090#", "Diagnostic Configuration.")
)

val secretCodesList_HTC = listOf(
    SecretCodes("*#06#", "Display IMEI number."),
    SecretCodes("#*#4636#*#*", "Device information program"),
    SecretCodes("*#*#7262626#*#*", "Field test"),
    SecretCodes("*#*#3424#*#*", "HTC function test program"),
    SecretCodes("*#*#1111#*#*", "Display software information."),
    SecretCodes("*#*#1472365#*#*", "GPS Test 2"),
    SecretCodes("*#*#232331#*#*", "Bluetooth test"),
    SecretCodes("*#*#0*#*#*", "Display test"),
    SecretCodes("*#*#2663#*#*", "Touch Screen version"),
    SecretCodes("*#*#2664#*#*", "Touch Screen Test"),
    SecretCodes("#*#759#*#*", "Debug UI"),
    SecretCodes("*2767*3855#", "Factory format"),
    SecretCodes("*#*#4636#*#*", "Testing menu"),
    SecretCodes("*#*#4636#*#*", "Display info about device"),
    SecretCodes("*#*#7*#*#34971539#*#*", "Camera information"),
    SecretCodes("*#*#1472365#*#*", "Short GPS test."),
    SecretCodes("*#*#197328640#*#*", "Service activity test mode"),
    SecretCodes("*#*#232338#*#*", "Wi-Fi Mac address"),
    SecretCodes("*#*#0842#*#*", "Vibration and backlight test "),
    SecretCodes("*#*#2663#*#*", "Check touch screen version"),
    SecretCodes("*#*#0*#*#*", "LCD test"),
    SecretCodes("*#*#2664#*#*", "Touch screen test "),
    SecretCodes("*#*#0588#*#*", "Proximity sensor test"),
    SecretCodes("*#*#3264#*#*", "RAM information"),
    SecretCodes("##3384#", "For trial Menu."),
    SecretCodes("##786#", "Reverse Logistic Support."),
    SecretCodes("##3424#", "Diagnostic mode."),
    SecretCodes("*#*#2222#*#*", "Display hardware version"),
    SecretCodes("*#*#232338#*#*", "Wi-Fi Mac address"),
    SecretCodes("*#*#232337#*#", "Bluetooth Mac address"),
    SecretCodes("##7738#", "Protocol Revision."),
    SecretCodes("*#*#4636#*#*", "Htc Info Menu."),
    SecretCodes("*#*#8255#*#*", "Launches GTalk Service Monitor."),
    SecretCodes("*#*#1472365#*#*", "GPS Test"),
    SecretCodes("*#*#232331#*#*", "Bluetooth test"),
    SecretCodes("*2767*3855#", "Reinstall the firmware"),
    SecretCodes(str2, "USB logging control "),
    SecretCodes("*#746#", "Debug dump menu."),
    SecretCodes("*#*#2434#*#*", "Htc Function test program."),
    SecretCodes("##3282#", "For EPST."),
    SecretCodes("##8626337#", "For Vocoder."),
    SecretCodes("##3384#", "For trial Menu."),
    SecretCodes("##786#", "Reverse Logistic Support.")
)

val secretCodesList_sony = listOf(
    SecretCodes("*#06#", "Display IMEI number."),
    SecretCodes("*#*#225#*#*", "Events calendar."),
    SecretCodes("*#*#426#*#*", "Debug information for Google Play service"),
    SecretCodes(str3, "USB logging control"),
    SecretCodes("*#9900#", "System dump mode Sony Xperia M"),
    SecretCodes("*#*#97#*#*", "Language and Keyboard settings in Sony Xperia M"),
    SecretCodes("*#*#46*#*#", "Reset Sim in Sony Xperia M"),
    SecretCodes("#7465625*77*Code#", "Disables SP lock"),
    SecretCodes("*7465625*27*Code#", "Enables CP lock"),
    SecretCodes("#7465625*27*Code#", "Disables CP lock "),
    SecretCodes("#7465625*746*Code#", "Disables SIM lock"),
    SecretCodes("7465625*746*Code#", "Enables SIM lock "),
    SecretCodes("*7465625*228#", "Activa lock ON "),
    SecretCodes("#7465625*228#", "Activa lock OFF"),
    SecretCodes("*#*#0283#*#*", "Packet Loopback."),
    SecretCodes("*#*#0*#*#*", "LCD display test "),
    SecretCodes("*#*#0673#*#*", "Melody test "),
    SecretCodes("*#*#2664#*#*", "Touch screen test "),
    SecretCodes("*#*#0588#*#*", "Proximity sensor test "),
    SecretCodes("*#06#", "Display IMEI number."),
    SecretCodes("*#7465625#", "View phone lock status "),
    SecretCodes("*7465625*638*Code#", "Enables Network lock"),
    SecretCodes("#7465625*638*Code#", "Disables Network lock"),
    SecretCodes("*7465625*782*Code#", "Enables Subset lock"),
    SecretCodes("#7465625*782*Code#", "Disables Subset lock"),
    SecretCodes("*7465625*77*Code#", "Enables SP lock "),
    SecretCodes("*#*#*7378423#*#*", "Service Test, Pressure Sensor."),
    SecretCodes("*#*#46360#*#*", "Acess phone Information."),
    SecretCodes("*#*#232339#*#*", "Wireless LAN Tests."),
    SecretCodes("*#*#526#*#*", "Wireless LAN Tests."),
    SecretCodes("*#*#528#*#*", "Wireless LAN Tests."),
    SecretCodes("*2767*3855#", "Factory reset on Xperia Z.."),
    SecretCodes(str, "Shows Complete Information about the Camera."),
    SecretCodes("*#*#197328640#*#*", "Enable test mode for Service Activity."),
    SecretCodes("*#*#273283*255*663282#*#*", "For Quick Backup to your Media Files."),
    SecretCodes("*#*#232338#*#*", "Used to Display Wi-Fi Mac-address."),
    SecretCodes(str10, "Used for a quick GPS Test."),
    SecretCodes("*#*#1575#*#*", "For another different type of GPS test."),
    SecretCodes("*#*#0283#*#*", "Packet Loopback Test."),
    SecretCodes("*#*#0#*#*", "LCD Display Test."),
    SecretCodes("*#*#0588#*#*", "Proximity Sensor test."),
    SecretCodes(str9, "RAM Version."),
    SecretCodes(str8, "Bluetooth Testing."),
    SecretCodes("*#*#0673#*#*", "To Test Audio of Xperia U."),
    SecretCodes("*#*#0289#*#*", "To Test Audio of Xperia U."),
    SecretCodes("*#*#2663#*#*", "Display Touch Screen Version."),
    SecretCodes("*#*#7262626#*#*", "Field Test."),
    SecretCodes("*#*#232337#*#*", "Display Bluetooth Device Address."),
    SecretCodes("*#*#8255#*#*", "For Google Talk Service Monitoring."),
    SecretCodes("*#*#4986*2650468#*#*", "Hardware, Phone,PDA,RF Call Date firmware informations."),
    SecretCodes(str7, "PDA and Phone Firmware Information."),
    SecretCodes(str6, "FTA Software Version."),
    SecretCodes("*#*#8350#*#*", "Disable Voice Dialing Mode."),
    SecretCodes("*#*#05#*#*", "Execute from Emergency dial Screen to unlock PUK code."),
    SecretCodes("*#*#7378423#*#*", "Pressure Sensor, Service Test."),
    SecretCodes(str5, "FTA Hardware Version."),
    SecretCodes("*#*#44336#*#*", "Display Build Time and change list number."),
    SecretCodes("*#*#8351#*#*", "Enable Voice Dialing Mode.")
)

val secretCodesList_Lenovo = listOf(
    SecretCodes("*#06#", "Display IMEI number."),
    SecretCodes("####1040#", "Check Network status information,View Local CELL lane rxlev."),
    SecretCodes("####0000#", "Check phone Software Version."),
    SecretCodes("####2222#", "lookup Cell Phone SN as 6162."),
    SecretCodes("####11#", "Network time syuchronization."),
    SecretCodes("####1001#", "Unicom network lock feature."),
    SecretCodes("*7465625*638*Code#", "Enables Network lock"),
    SecretCodes("#7465625*638*Code#", "Disables Network lock"),
    SecretCodes("*7465625*782*Code#", "Enables Subset lock"),
    SecretCodes("#7465625*782*Code#", "Disables Subset lock"),
    SecretCodes("*7465625*77*Code#", "Enables SP lock "),
    SecretCodes("#7465625*77*Code#", "Disables SP lock"),
    SecretCodes("*7465625*27*Code#", "Enables CP lock"),
    SecretCodes("*#*#0*#*#*", "LCD display test "),
    SecretCodes("*#*#0673#*#*", "Melody test "),
    SecretCodes("*#*#2664#*#*", "Touch screen test "),
    SecretCodes("*#*#0588#*#*", "Proximity sensor test "),
    SecretCodes("*#06#", "Display IMEI number."),
    SecretCodes("*#0000#", "Query Software kernel version as AE23 AE06."),
    SecretCodes("####10086#", "Mobile Network Lock Feature."),
    SecretCodes("####4444#", "Phone automatically restart."),
    SecretCodes("####88**#", "Right Function MONTERNET and players to switch between."),
    SecretCodes("####1111#", "Screen Colors."),
    SecretCodes("####7777#", "Phone restore factory settings."),
    SecretCodes("*#*#*7378423#*#*", "Service Test, Pressure Sensor."),
    SecretCodes("*#*#46360#*#*", "Acess phone Information."),
    SecretCodes("*#*#232339#*#*", "Wireless LAN Tests."),
    SecretCodes("*#*#526#*#*", "Wireless LAN Tests."),
    SecretCodes("*#*#528#*#*", "Wireless LAN Tests."),
    SecretCodes("#7465625*27*Code#", "Disables CP lock "),
    SecretCodes("#7465625*746*Code#", "Disables SIM lock"),
    SecretCodes("7465625*746*Code#", "Enables SIM lock "),
    SecretCodes("*7465625*228#", "Activa lock ON "),
    SecretCodes("#7465625*228#", "Activa lock OFF")
)

val secretCodesList_blackberry = listOf(
    SecretCodes("*#9900#", "Sysdump screen."),
    SecretCodes("*2767*3855#", "Factory Data Wipe And internal SD Resets soon as you enter #."),
    SecretCodes("*#8255#", "For G Talk service monitor."),
    SecretCodes("*#7780#", "For Factory data reset."),
    SecretCodes("*#7594#", "Change Power button option in your Phone."),
    SecretCodes("*#197328640#", "Service Mode."),
    SecretCodes("*#0011#", "Show Network mode/ Power info hidden menu/cell info."),
    SecretCodes("*#4636#", "Show Battery and other general settings like GSM/CDMA."),
    SecretCodes("*#1472365#", "GPS Test."),
    SecretCodes("*#0*#", "Testing Mode."),
    SecretCodes("*#7465625#", "Engineering Mode."),
    SecretCodes("*#3214789650#", "GPS Service Menu."),
    SecretCodes("*#34971539#", "For Information about camera."),
    SecretCodes("*#1234#", "Display phones current firmware.")
)

val secretCodesList_motorola = listOf(
    SecretCodes("*#06#", "Display IMEI number."),
    SecretCodes("*#0*#", "Service menu"),
    SecretCodes("*#9090#", "Diagnostic configuration"),
    SecretCodes("*#*#2664#*#*", "Test the touchscreen"),
    SecretCodes("*#7465625#", "View phone lock status"),
    SecretCodes("*#9900#", "System dump mode"),
    SecretCodes(str12, "FTA SW Version"),
    SecretCodes(str18, "FTA HW Version"),
    SecretCodes("*#301279#", "HSDPA/HSUPA Control"),
    SecretCodes(str3, "USB logging control Menu"),
    SecretCodes("##7764726", "Hidden service menu"),
    SecretCodes("*#302#", "OK Acoustic test"),
    SecretCodes("*#3370#", "Enhanced full rate"),
    SecretCodes("*#0000#", "OK Settings saved"),
    SecretCodes("*#307#", "OK Engineering test mode"),
    SecretCodes("*#*#786#*#*", "Moto G Hard Reset"),
    SecretCodes("*#*#2432546#*#*", "Manual Check Update"),
    SecretCodes(str3, "USB logging control,"),
    SecretCodes("*#9090#", "Diagnostic configuration"),
    SecretCodes("*#*#232339#*#*", "Wireless LAN tests"),
    SecretCodes("*#*#0842#*#*", "Backlight/vibration test"),
    SecretCodes(str4, "Display phone information"),
    SecretCodes("*#*#7780#*#*", "Reset phone factory data reset"),
    SecretCodes("*2767*3855#", "Format device to factory reset"),
    SecretCodes("*#*#273282*255*663282*#*#*", "Backup of all media files"),
    SecretCodes("*#*#197328640#*#*", "Enable test mode for service"),
    SecretCodes(str7, "Super Mode."),
    SecretCodes("*#*#7873778#*#*", "Super user App."),
    SecretCodes("*#*#2486#*#*", "Service Menu."),
    SecretCodes(str7, "Super user App."),
    SecretCodes("*#*#2432546#*#*", "Check update.")
)

val secretCodesList_lg = listOf(
    SecretCodes("*#06#", "Display IMEI number."),
    SecretCodes("*#07#", "Displays the IMEI and Software Version"),
    SecretCodes("*#07#", "IMEI and Software number."),
    SecretCodes("*8375#", "Software version on B1200."),
    SecretCodes("9270#", "Works on very old LG Phones."),
    SecretCodes("*6861#", "Recount checksum on B1200."),
    SecretCodes("8060#", "Works on very old LG Phones."),
    SecretCodes("3845#*XXXX#", "Secret menu Code for newer LG's."),
    SecretCodes("2945#*#", "It works on most of the LG phones without Sim Card ."),
    SecretCodes("47328545454#", "Service menu code for U8130."),
    SecretCodes("47328545454#", "Service menu code for U8138."),
    SecretCodes("47328545454#", "Service menu code for U8180."),
    SecretCodes("637664#*#", "Service menu code for U8330."),
    SecretCodes("*6*41*12##", "Service menu code for U8360."),
    SecretCodes("885508428679#*#", "Service menu code for U8550."),
    SecretCodes("142358#*#", "Service menu code for U890 and U880."),
    SecretCodes("082065#*#", "Service menu code for U900."),
    SecretCodes("1945#*5101#", "Secret menu for older LG's."),
    SecretCodes("2945#*5101#", "Secret menu for older LG's."),
    SecretCodes("1945#*70001#", "Secret menu for older LG's."),
    SecretCodes("#PWR 668", "Initiates a Factory test of phone"),
    SecretCodes("2945#*#", "Enter the Test Screen"),
    SecretCodes("2945*#01*#", "Opens a secret menu"),
    SecretCodes("1945#*5101#", "Unlock B1200 Models"),
    SecretCodes("2945#*5101#", "Unlock 5200 & 510W Models"),
    SecretCodes("2945#*70001#", "Unlock 7020 & 7010 Models"),
    SecretCodes("2947#*", "Unlock 500 & 600 Models"),
    SecretCodes("2945#*88110#", "Access the LG unlock menu"),
    SecretCodes("1809#*#900#", "Secret code for KM900."),
    SecretCodes("277634#*#", "Code for U8110, U8120 and KU800 etc."),
    SecretCodes("9278#", "Works on very old LG Phones."),
    SecretCodes("1809#*Code#", "Service menu code=phone name e,g 1809#*360# for KS360."),
    SecretCodes("1809#*500#", "Secret menu for K500, K501 and K502."),
    SecretCodes("525252#*#", "Service menu code for U8380."),
    SecretCodes("2947#*", "Secret menu for very old LG's."),
    SecretCodes("3845#*920#", "Secret menu for LG P920 Optimus 3D.")
)
val secretCodes_oppo = listOf(
    SecretCodes("*#06#", "Display IMEI number."),
    SecretCodes("*#*#7780#*#*", "Factory reset"),
    SecretCodes("#*#4636#*#*", "OppoF1 Phone information"),
    SecretCodes("#*#4636#*#*", "Oppo F1 Usage statistics"),
    SecretCodes("*#*#225#*#*", "Events calendar."),
    SecretCodes("*7465625*782*Code#", "Enables Subset lock"),
    SecretCodes("#7465625*782*Code#", "Disables Subset lock"),
    SecretCodes("*7465625*77*Code#", "Enables SP lock "),
    SecretCodes("#7465625*77*Code#", "Disables SP lock "),
    SecretCodes("*7465625*27*Code#", "Enables CP lock "),
    SecretCodes("#7465625*27*Code#", "Disables CP lock "),
    SecretCodes("*7465625*746*Code#", "Enables SIM lock "),
    SecretCodes("#7465625*746*Code#", "Disables SIM lock "),
    SecretCodes("*7465625*228#", "Active lock ON"),
    SecretCodes("#7465625*228#", "Active lock OFF "),
    SecretCodes("*7465625*28638#", "Auto Network lock ON "),
    SecretCodes("#7465625*28638#", "Auto Network lock OFF "),
    SecretCodes("*#*#759#*#*", "Access Google Partner setup"),
    SecretCodes("*#872564# ", "USB logging control"),
    SecretCodes("#*#4636#*#*", "Oppo F1 Battery information "),
    SecretCodes("#*#4636#*#*", "Oppo F1 Battery history "),
    SecretCodes("*#9900#", " System dump mode OPPO F1s"),
    SecretCodes("*#7465625#", "View phone lock status "),
    SecretCodes("*7465625*638*Code#", "Enables Network lock "),
    SecretCodes("#7465625*638*Code#", "Disables Network lock "),
    SecretCodes("*7465625*28782#", "Auto subset lock ON"),
    SecretCodes("#7465625*28782#", "Auto subset lock OFF "),
    SecretCodes("*7465625*2877#", "Auto SP lock ON"),
    SecretCodes("#7465625*2877#", "Auto SP lock OFF "),
    SecretCodes("*7465625*2827#", "Auto CP lock ON "),
    SecretCodes("#7465625*2827#", "Auto CP lock OFF "),
    SecretCodes("*#*#232339#*#*", "WLAN test"),
    SecretCodes("*#*#526#*#*", "WLAN test"),
    SecretCodes("*#*#528#*#*", "WLAN test"),
    SecretCodes("*#*#1575#*#*", "For a more advanced GPS test"),
    SecretCodes("*#*#0283#*#*", "Packet Loopback"),
    SecretCodes("*#*#0*#*#*", "LCD display test "),
    SecretCodes("*#1234#", "View Software Details."),
    SecretCodes("*#36446337#", "Test Function Instruction."),
    SecretCodes("*#804#", "Automatically disconnect test mode."),
    SecretCodes("*#805#", "Engineering Bluetooth test mode."),
    SecretCodes("*#*#2664#*#*", "Touch screen test "),
    SecretCodes("*#*#0588#*#*", "Proximity sensor test "),
    SecretCodes(str14, "RAM version OPPO F1s "),
    SecretCodes("*#800#", "Enter engineering mode."),
    SecretCodes("*#888#", "View hardware pch version."),
    SecretCodes("*#900#", "Test Photograph RGB."),
    SecretCodes("*#99#", "Screen lights long bright."),
    SecretCodes("*#801#", "Engineering switch test mode."),
    SecretCodes("*#802#", "TTFF GPS test mode."),
    SecretCodes("*#803#", "Enter engineering network test mode."),
    SecretCodes("*#808#", "Enter manual engineering test mode."),
    SecretCodes("*#809#", "Enter engineering echo test mode."),
    SecretCodes("*#6776#", "Machine Information."),
    SecretCodes("*#806#", "Enter aging test mode."),
    SecretCodes("*#807#", "Enter engineering test mode.")
)

val secretCodesList_qmobile = listOf(
    SecretCodes("*#06#", "Display IMEI number."),
    SecretCodes("*#07#", "IMEI and SW (Q Mobile 510)."),
    SecretCodes("*8375#", "Software version (Q Mobile B1200)."),
    SecretCodes("277634#*#", "Test menu 8110,8120."),
    SecretCodes("49857465454#", "Test menu 8180 V10a."),
    SecretCodes("492662464663#", "Test menu 8180 V11a."),
    SecretCodes("47328545454#", "Test menu 8130,8138."),
    SecretCodes("*6861#", "Recount checksum (Q Mobile B1200)."),
    SecretCodes("#PWR 668", "Factory test (Q Mobile B1200)."),
    SecretCodes("1845#*501#", "Simlock menu (Q Mobile B1200)."),
    SecretCodes("2945#*51013", "Simlock menu (Q Mobile 510W,5200)."),
    SecretCodes("637664#*#", "Test menu 8310.")
)

val secretCodesList_china = listOf(
    SecretCodes("*#06#", "Display IMEI number."),
    SecretCodes("*#110*01#", "Enter into Engineering Mode."),
    SecretCodes("*#0000#", "Set Default Language."),
    SecretCodes("*#0007#", "Set Language to Russian."),
    SecretCodes("*#0033#", "Set Language to French."),
    SecretCodes("*#900#", "Check Software Version."),
    SecretCodes("*#800#", "Check Software Version."),
    SecretCodes("*#4960#", "Send to view Information about Mobile phone."),
    SecretCodes("*#8140#", "Send Used for NET lock."),
    SecretCodes("*#1110#", "Send For Special NET lock."),
    SecretCodes("*#987#", "Enter into factory Mode."),
    SecretCodes("*#987*99#", "Restore factory Setting."),
    SecretCodes("*#0034#", "Set Language to Spanish."),
    SecretCodes("*#0039#", "Set Language to Italian."),
    SecretCodes("*#0084#", "Set Language to Vietname."),
    SecretCodes("*#0966#", "Set Language to Arabic."),
    SecretCodes("*#2634#", "Send For Unlock GPRS Settings."),
    SecretCodes("*73738#", "Send For Reset the Hardware parts."),
    SecretCodes("*#0044#", "Set Language to English."),
    SecretCodes("*#0049#", "Set Language to German."),
    SecretCodes("*#0066#", "Set Language to Thai.")
)

val secretCodesList_Generic = listOf(
    SecretCodes("*#06#", "Display IMEI number."),
    SecretCodes(str21, "Displayn information about Phone, Battery and Usage Statics."),
    SecretCodes(str15, "For a quick GPS Test."),
    SecretCodes("*#*#1575#*#*", "A Different type GPS Test."),
    SecretCodes("*#*#7780#*#*", "Resetting your Phone to factory state, only deletes application data."),
    SecretCodes("*2767*3855#", "It's a complete wiping of your mobile."),
    SecretCodes(str, "Shows complete information about the camera."),
    SecretCodes("*#*#0283#*#*", "Packet loopback Test."),
    SecretCodes("*#*#0#*#*", "LCD Display Test."),
    SecretCodes("*#*#0842#*#*", "Vibration and Backlight test."),
    SecretCodes("*#*#2663#*#*", "Display touch-screen version."),
    SecretCodes("*#*#2664#*#*", "Touch Screen Test."),
    SecretCodes("*#*#0588#*#*", "Proximity Sensor Test."),
    SecretCodes(str28, "RAM version."),
    SecretCodes(str13, "Bluetooth Test."),
    SecretCodes("*#*#232339#*#*", "Wireless Lan Tests."),
    SecretCodes("*#*#526#*#*", "Wireless Lan Tests."),
    SecretCodes(str11, "Display Wi-Fi mac-address."),
    SecretCodes("*#*#7594#*#*", "Changing the power button behavior."),
    SecretCodes("*#*#273283*255*663282#*#*", "For a quick backup to your media."),
    SecretCodes("*#*#197328640#*#*", "Enabling test mode for service activity."),
    SecretCodes("*#*#8255#*#*", "For Google talk Service monitoring."),
    SecretCodes("*#*#4986*2650468#*#*", "Hardware, Phone, PDA, RF Call date firmware info."),
    SecretCodes(str23, "PDA and Phone firmware information."),
    SecretCodes(str12, "FTA Software version."),
    SecretCodes(str32, "FTA Hardware version."),
    SecretCodes("*#*#44336#*#*", "Displays Build time and change list number."),
    SecretCodes("*#*#8351#*#*", "Enable voice logging mode."),
    SecretCodes("*#*#8350#*#*", "Disable voice logging mode."),
    SecretCodes("*#*#7262626#*#*", "Field Test."),
    SecretCodes("*#*#232337#*#*", "Display Bluetooth device address.")
)

val secretCodesList_microsoft_windows = listOf(
    SecretCodes("*#06#", "Display IMEI number."),
    SecretCodes("*#7780#", "Reset to factory setting."),
    SecretCodes("*#2820#", "Bluetooth device address."),
    SecretCodes("*#3370#", "Phone automatically restart and increase battery level."),
    SecretCodes("*#4720#", "Half rate Codec Activation."),
    SecretCodes("*#4720#", "Half rate Codec deactivation."),
    SecretCodes("*#62209526#", "Display the MAC Address of WLAN adapter."),
    SecretCodes("#pw+1234567890+1#", "Shows if Sim have restrictions."),
    SecretCodes("*#3370#", "Increase Signal Strength, better signal reception.")
)

val secretCodesList_Huawei = listOf(
    SecretCodes("*#2820#", "Bluetooth device address."),
    SecretCodes("*#67705646#", "This will clear the LCD Display."),
    SecretCodes("*#0000#", "To View Software version."),
    SecretCodes("*#746025625#", "Sim Clock allowed status."),
    SecretCodes("*#06#", "Display IMEI number."),
    SecretCodes("*#*#4636#", "Phone Information, Usage and Battery."),
    SecretCodes("*#0*#", "Enter Service menu."),
    SecretCodes("*#*#0842#*#*", "Vibration Test."),
    SecretCodes(str12, "FTA Software version."),
    SecretCodes(str22, "USB Logging Control."),
    SecretCodes("*#9900#", "System Dump mode."),
    SecretCodes("*#*#197328640#*#*", "Enable test mode for Service."),
    SecretCodes("*#*#0842#*#*", "Back-light Test."),
    SecretCodes("*#*#2664#*#*", "Test the touch Screen."),
    SecretCodes("*#301279#", "HSDPA Control menu."),
    SecretCodes("*#12580*369#", "Complete S/W and H/W information."),
    SecretCodes("*#9090#", "Diagnostic Configuration."),
    SecretCodes("*#*#273282*255*663282*#*#*", "Backup All media files."),
    SecretCodes("*#*#232339#*#*", "Wireless LAN test.")
)


val secretCodesList_infinix = listOf(
    SecretCodes("*#06#", "Display IMEI number."),
    SecretCodes(str21, "Phone information of Infinix Hot 4"),
    SecretCodes(str21, " Battery information of Infinix Hot 4"),
    SecretCodes(str21, "Battery history of Infinix Hot 4"),
    SecretCodes(str21, "Usage statistics of Infinix Hot 4"),
    SecretCodes("*#*#7780#*#*", "Remove Downloaded apps for Infinix Hot 4"),
    SecretCodes("*2767*3855#", "Used for factory format for Infinix Hot 4."),
    SecretCodes("*#*#225#*#*", "Events calendar."),
    SecretCodes(str26, "Debug info for Google Play service."),
    SecretCodes("*#*#759#*#* ", "Access Google Partner setup."),
    SecretCodes(str38, "USB logging control ."),
    SecretCodes("*#9900#", "System dump mode Infinix Hot 4"),
    SecretCodes("*#*#97#*#*", "Language settings in Infinix Hot 4"),
    SecretCodes("*#*#46*#*#", "Reset Sim in Infinix Hot 4"),
    SecretCodes("*#*#197328640#*#*", "Used to enter into Service mode."),
    SecretCodes("*#7465625#", "View phone lock status"),
    SecretCodes(str28, "Ram version"),
    SecretCodes(str33, "For Bluetooth testing"),
    SecretCodes("*#*#7262626#*#*", "Field testing"),
    SecretCodes("*#*#232337#*#", "Display bluetooth device address"),
    SecretCodes("##778 (+call)", "For Epst menu"),
    str29?.let { SecretCodes(it, "Check Camera info in Infinix X551") },
    SecretCodes("*#*#273283*255*663282*#*#*", "Backup media files in Infinix X551"),
    SecretCodes("*#*#197328640#*#*", "To check for service activity"),
    SecretCodes("*#*#232339#*#* OR *#*#526#*#*", "Wireless Lan Tests"),
    SecretCodes(str35, "To find Mac-address of Wi-Fi"),
    SecretCodes(str40, "LCD display checking"),
    SecretCodes("*#*#0673#*#* OR *#*#0289#*#*", "For Audio testing"),
    SecretCodes("*7465625*638*Code#", "Enables Network lock"),
    SecretCodes("#7465625*638*Code#", "Disables Network lock"),
    SecretCodes(str34, "Enables Subset lock "),
    SecretCodes("#7465625*782*Code#", "Disables Subset lock "),
    SecretCodes("*7465625*77*Code#", "Enables SP lock"),
    SecretCodes("*7465625*77*Code#", "Disables SP lock "),
    SecretCodes("*7465625*27*Code#", "Enables CP lock "),
    SecretCodes("*7465625*27*Code#", "Disables CP lock "),
    SecretCodes("*7465625*746*Code#", str25),
    SecretCodes("*7465625*746*Code#", "Disables SIM lock "),
    SecretCodes("*7465625*228#", " Activa lock ON"),
    SecretCodes("*7465625*228#", " Activa lock OFF"),
    SecretCodes("*7465625*28638#", "Auto Network lock ON"),
    SecretCodes("*7465625*28638#", "Auto Network lock OFF"),
    SecretCodes("*7465625*28782#", "Auto subset lock ON"),
    SecretCodes("*7465625*28782#", "Auto subset lock OFF"),
    SecretCodes("*7465625*2877#", "Auto SP lock ON"),
    SecretCodes("*7465625*2877#", "Auto SP lock OFF"),
    SecretCodes("*7465625*2827#", "Auto CP lock ON"),
    SecretCodes("*7465625*2827#", "Auto CP lock OFF"),
    SecretCodes("*7465625*28746#", "Auto SIM lock ON"),
    SecretCodes("*7465625*28746#", "Auto SIM lock OFF"),
    SecretCodes("*#*#232339#*#*", "WLAN test"),
    SecretCodes(str35, "Shows WiFi MAC address"),
    SecretCodes(str37, "GPS Test"),
    SecretCodes("*#*#1575#*#*", "For a more advanced GPS test."),
    SecretCodes(str33, "Bluetooth test."),
    SecretCodes("*#*#36245#*#*", "Access email debug information."),
    SecretCodes("*#*#4986*2650468#*#*", "PDA, Phone, H/W, RFCallDate"),
    SecretCodes(str36, "PDA and Phone firmware information"),
    SecretCodes("*#1234#", "PDA and Phone firmware information"),
    SecretCodes(str12, "FTA SW Version."),
    SecretCodes("*#12580*369#", "Software and hardware info."),
    SecretCodes("#9090#", "Diagnostic configuration in Infinix Hot 2."),
    SecretCodes(str32, "FTA HW Version."),
    SecretCodes("*#*#44336#*#*", "PDA, Phone, CS, Build Time number."),
    SecretCodes("*#*#0283#*#*", "Packet Loopback."),
    SecretCodes(str40, "LCD display test."),
    SecretCodes("*#*#0673#*#*", "Melody test."),
    SecretCodes(" OR *#*#0289#*#*", ""),
    SecretCodes("*#*#0842#*#*", "Device test."),
    SecretCodes("*#*#2663#*#*", "Touch screen version Infinix Hot 2"),
    SecretCodes(str41, "Touch screen test"),
    SecretCodes(str30, "Proximity sensor test "),
    SecretCodes(str28, "RAM version Infinix Hot 2 "),
    SecretCodes("##002#", "Cancel all diverts"),
    SecretCodes("##004#", "Cancel all conditional call forwarding"),
    SecretCodes("**004* phone number#", "Activate all call forwarding"),
    SecretCodes("###21", "Deactivate call forwarding"),
    SecretCodes("#21#", "Deactivate Unconditional call forwarding"),
    SecretCodes("*21#", "Activate Unconditional call forwarding"),
    SecretCodes("*#21#", "Check the condition call forwarding"),
    SecretCodes("###61", "Switch off & deactivate no answer"),
    SecretCodes("#61#", "Deactivate no answer"),
    SecretCodes("**61* phone number#", "Enable and Activate no answer"),
    SecretCodes("*61#", "Activate no answer"),
    SecretCodes("*#61#", "Check the condition no answer"),
    SecretCodes("*62#", "Activate Diversion in case of not available"),
    SecretCodes("*#62#", "Check condition in case of not available"),
    SecretCodes("###62", "Switch off and deactivate"),
    SecretCodes("#62#", "Deactivate"),
    SecretCodes("**62*phone number#", "Enable and Activate"),
    SecretCodes("*62#", "Activate"),
    SecretCodes("*#62#", "Check the condition "),
    SecretCodes("###67", "Switch off Diversion in case of busy"),
    SecretCodes("#67#", "Deactivate Diversion in case of busy"),
    SecretCodes("**67*phone number#", "Enable and Activate Diversion if busy"),
    SecretCodes("*#67#", "Check condition Diversion in case of busy"),
    SecretCodes("**330*password#", "Activate Barring of all calls"),
    SecretCodes("#330*password#", "Deactivate Barring of all calls"),
    SecretCodes("*#330#", "Check the condition"),
    SecretCodes("*111#", "GP Smart menu"),
    SecretCodes("*140#", "Rob Smart menu"),
    SecretCodes("*789#", "Banglalink Smart menu"),
    SecretCodes(str41, "Check touch-screen in Infinix X557")
)

val secretCodesList_vivo = listOf(
    SecretCodes("*#06#", "Display IMEI number."),
    SecretCodes("*#*#273282*255*663282*#*#*", "Immediate backup of all media files"),
    SecretCodes("*#*#4636#*#* ", "Phone information "),
    SecretCodes("*#*#4636#*#* ", "Battery information "),
    SecretCodes("*#*#4636#*#* ", "Battery history "),
    SecretCodes("*#7465625#", "View phone lock status "),
    SecretCodes("*7465625*638*Code#", "Enables Network lock"),
    SecretCodes("#7465625*782*Code#", "Disables Subset lock"),
    SecretCodes("*7465625*77*Code#", "Enables SP lock "),
    SecretCodes("*#*#7780#*#* ", "System and application data and settings "),
    SecretCodes("*#9900#", "System dump mode Vivo Y51L"),
    SecretCodes("*#*#97#*#*", "Language and Keyboard settings in Vivo Y51L"),
    SecretCodes("*#*#46*#*#", "Reset Sim in Vivo Y51L"),
    SecretCodes("*#301279#", "HSDPA, Control Menu "),
    SecretCodes("*2767*3855#", "This code is used for factory format."),
    str29?.let { SecretCodes(it, "Get information about phone camera") },
    SecretCodes("*#*#7594#*#*", "End Call / Power"),
    SecretCodes("#7465625*638*Code#", "Disables Network lock"),
    SecretCodes(str44, "Enables Subset lock"),
    SecretCodes("*#*#225#*#*", "Events calendar."),
    SecretCodes(str26, "Debug information for Google Play service."),
    SecretCodes("*#*#759#*#*", "Access Google Partner setup "),
    SecretCodes(str38, "USB logging control "),
    SecretCodes("#7465625*77*Code#", "Disables SP lock"),
    SecretCodes("*7465625*27*Code#", "Enables CP lock"),
    SecretCodes("#7465625*27*Code#", "Disables CP lock "),
    SecretCodes(str27, "Disables SIM lock"),
    SecretCodes("7465625*746*Code#", str45),
    SecretCodes("*7465625*228#", "Activa lock ON "),
    SecretCodes("#7465625*228#", "Activa lock OFF")
)

val secretCodesList_acer = listOf(
    SecretCodes("*#06#", "Display IMEI number."),
    SecretCodes("*#400#", "Display Adc/ Set Cal-Value."),
    SecretCodes("*#402#", "Set LCD Contrast."),
    SecretCodes("*#403#", "Display Errors Info."),
    SecretCodes("*#300#", "Display Info Hw & Sw."),
    SecretCodes("*#301#", "Menu Test."),
    SecretCodes("*#302#", "Menu Acoustics."),
    SecretCodes("*#303#", "Settings saved, Set English language?."),
    SecretCodes("*#307#", "Menu Engineering."),
    SecretCodes("*#311#", "Reset Phone Code."),
    SecretCodes("*#330#", "Execute not success."),
    SecretCodes("*#331#", "Service deactivated."),
    SecretCodes("*#332#", "Service unavailable."),
    SecretCodes("*#333#", "Execute not success."),
    SecretCodes("*#351#", "Service unavailable."),
    SecretCodes("*#2558#", "Time of network connection."),
    SecretCodes("*#2562#", "Fores reconnection to network."),
    SecretCodes("*#7489#", "Dispalys and modify phones' security code."),
    SecretCodes("*#3377#", "SIM lock information."),
    SecretCodes("*#7378#", "SIM card Informations."),
    SecretCodes("*#7693#", "Enable/disable Sleep Mode."),
    SecretCodes("*2767*3855#", "This code is used for factory format."),
    str29?.let { SecretCodes(it, "Get information about phone camera") },
    SecretCodes("*#*#7594#*#*", "End Call / Power"),
    SecretCodes("#7465625*77*Code#", "Disables SP lock"),
    SecretCodes("*7465625*27*Code#", "Enables CP lock"),
    SecretCodes("#7465625*27*Code#", "Disables CP lock "),
    SecretCodes(str56, "Disables SIM lock"),
    SecretCodes("7465625*746*Code#", str45),
    SecretCodes("*7465625*228#", "Activa lock ON "),
    SecretCodes("#7465625*228#", "Activa lock OFF")
)

val secretCodesList_xiaomi = listOf(
    SecretCodes("*#06#", "Display IMEI number."),
    SecretCodes("*#*#6484#*#*", "Engineering Mode-1."),
    SecretCodes("*#*#64663#*#*", "Engineering Mode-2."),
    SecretCodes("**#*#4636#*#*", "Phone Info Mode."),
    SecretCodes("*#*#564548#*#*", "View Version Info."),
    SecretCodes("*#*#284#*#*", "Send bug report ."),
    SecretCodes(str21, "Phone Info Menu in Redmi Note 3."),
    SecretCodes("#7465625*638*Code#", "Disables Network lock"),
    SecretCodes(str44, "Enables Subset lock"),
    SecretCodes("*#*#225#*#*", "Events calendar."),
    SecretCodes(str26, "Debug information for Google Play service."),
    SecretCodes("*#*#759#*#*", "Access Google Partner setup "),
    SecretCodes(str38, "USB logging control "),
    SecretCodes("*2767*3855#", "This code is used for factory format."),
    str29?.let { SecretCodes(it, "Get information about phone camera") },
    SecretCodes("*#*#7594#*#*", "End Call / Power"),
    SecretCodes("#7465625*77*Code#", "Disables SP lock"),
    SecretCodes("*7465625*27*Code#", "Enables CP lock"),
    SecretCodes("#7465625*27*Code#", "Disables CP lock "),
    SecretCodes(str56, "Disables SIM lock"),
    SecretCodes("7465625*746*Code#", str45),
    SecretCodes("*7465625*228#", "Activa lock ON "),
    SecretCodes("#7465625*228#", "Activa lock OFF")
)

val secretCodesList_nokia = listOf(
    SecretCodes("*#06#", "Display IMEI number."),
    SecretCodes("*#*#225#*#*", "Calendar."),
    SecretCodes(str26, "Debug info for Google Play Service"),
    SecretCodes("#7465625*77*Code#", "Disables SP lock"),
    SecretCodes("*7465625*27*Code#", "Enables CP lock"),
    SecretCodes(str46, "LCD display test"),
    SecretCodes("*#*#0673#*#*", "Melody test"),
    SecretCodes(str54, "Touch screen test"),
    SecretCodes(str50, "Proximity sensor test"),
    SecretCodes("*#06#", "Display IMEI number."),
    SecretCodes("*#*#759#*#*", "Access Google Partner Setup"),
    SecretCodes("*#*#2486#*#*", "Engineering Mode"),
    SecretCodes("*3370#", "Activate Enhanced Full Rate Codec."),
    SecretCodes("#3370#", "Deactivate Enhanced Full Rate Codec."),
    SecretCodes("*#4720#", "Activate Half Rate Codec."),
    SecretCodes("*#4720#", "Deactivate Half Rate Codec."),
    SecretCodes("*#9999#", "Phones software version if *#0000# does not work"),
    SecretCodes("#pw+1234567890+1#", "Provider Lock Status."),
    SecretCodes("#pw+1234567890+2#", "Network Lock Status"),
    SecretCodes("#pw+1234567890+3#", "Country Lock Status"),
    SecretCodes("#pw+1234567890+4#", "SIM Card Lock Status."),
    SecretCodes("*#21#", "All Calls are diverted to..."),
    SecretCodes("*#43#", "Call Waiting status of your phone."),
    SecretCodes("*#61#", " On No Reply calls are diverted to."),
    SecretCodes("*#62#", " Divert If Unreachable calls,are diverted to."),
    SecretCodes(" *#67#", "On Busy Calls are diverted to."),
    SecretCodes("*#*#273282*255*663282*#*#*", "Immediate backup of all media files."),
    SecretCodes("*#*#4636#*#* ", " Phone information "),
    SecretCodes("*#*#4636#*#* ", " Battery information  "),
    SecretCodes("*#*#4636#*#* ", " Battery history "),
    SecretCodes("*#*#4636#*#* ", " Usage statistics "),
    SecretCodes(str38, "USB logging control "),
    SecretCodes("*#*#46*#*#", "Reset Sim in Nokia X Dual SIM"),
    SecretCodes("*#7465625#", "View phone lock status "),
    SecretCodes("*7465625*638*Code#", "Enables Network lock"),
    SecretCodes("#7465625*638*Code#", "Disables Network lock"),
    SecretCodes(str44, "Enables Subset lock"),
    SecretCodes("#7465625*782*Code#", "Disables Subset lock"),
    SecretCodes("*7465625*77*Code#", "Enables SP lock "),
    SecretCodes("*#67705646#.", "Removes operator logo on 3310 & 3330"),
    SecretCodes("*#73#.", "Reset phone timers and game scores"),
    SecretCodes("*#746025625#", "Displays the SIM Clock status."),
    SecretCodes("*#7760#", " Manufactures code."),
    SecretCodes("*#7780#", "Restore factory settings."),
    SecretCodes("*#8110#", "Software version for the nokia 8110."),
    SecretCodes("*#92702689#", " Displays Serial Number"),
    SecretCodes("*#92702689#", " Displays Date Made"),
    SecretCodes("*#92702689#", " Displays Purchase Date"),
    SecretCodes("*#92702689#", " Displays Date of last repair"),
    SecretCodes("*#92702689#", " Displays Transfer User Data."),
    SecretCodes("#94870345123456789#", "Deactivate the PWM-Mem."),
    SecretCodes("**21*number#", "Turn on “All Calls” diverting."),
    SecretCodes(" **61*number#", " Turn on “No Reply” diverting."),
    SecretCodes("12345", "This is the default security code.."),
    SecretCodes("*#*#*7378423#*#*", "Service Test, Pressure Sensor."),
    SecretCodes("*#*#46360#*#*", "Acess phone Information."),
    SecretCodes(str55, "Wireless LAN Tests."),
    SecretCodes("*#*#526#*#*", "Wireless LAN Tests."),
    SecretCodes("*#*#528#*#*", "Wireless LAN Tests."),
    SecretCodes("#7465625*27*Code#", "Disables CP lock "),
    SecretCodes(str56, "Disables SIM lock"),
    SecretCodes("7465625*746*Code#", str45),
    SecretCodes("*7465625*228#", "Activa lock ON "),
    SecretCodes("#7465625*228#", "Activa lock OFF")
)

val secretCodeList_techno = listOf(
    SecretCodes("*#06#", "Display IMEI number."),
    SecretCodes("*#07#", "Specific Absorption Rate"),
    SecretCodes("*#0228# ", "Battery status (ADC, RSSI reading) "),
    SecretCodes("*#0*#", "Test LCD, hardware and many other parts of your Tecno mobile phone"),
    SecretCodes("*#*#225#*#* ", "Calendar Info "),
    SecretCodes(str26, "Google Play Services"),
    SecretCodes("*#1234#", "Check Software Version of Tecno Phone."),
    SecretCodes("*#*#0289#*#*", "Device Audio test"),
    SecretCodes(str54, "Device Touch-Screen test"),
    SecretCodes("*#*#232339#*#* ", "Device Wireless Lan Test "),
    SecretCodes("*#9900#", "System dump mode Vivo Y51L"),
    SecretCodes("*#*#97#*#*", "Language and Keyboard settings in Vivo Y51L"),
    SecretCodes("*#*#46*#*#", "Reset Sim in Vivo Y51L"),
    SecretCodes("*#301279#", "HSDPA, Control Menu "),
    SecretCodes("*2767*3855#", "This code is used for factory format."),
    str29?.let { SecretCodes(it, "Get information about phone camera") },
    SecretCodes("*#*#7594#*#*", "End Call / Power"),
    SecretCodes("#7465625*638*Code#", "Disables Network lock"),
    SecretCodes(str44, "Enables Subset lock"),
    SecretCodes("*#*#225#*#*", "Events calendar."),
    SecretCodes(str26, "Debug information for Google Play service."),
    SecretCodes("*#*#759#*#*", "Access Google Partner setup "),
    SecretCodes(str38, "USB logging control "),
    SecretCodes(str51, "Displays Wi-Fi Mac-address"),
    SecretCodes(str53, "FTA Software version"),
    SecretCodes(str47, "FTA Hardware version "),
    SecretCodes(str56, "Disables SIM lock"),
    SecretCodes("7465625*746*Code#", str45),
    SecretCodes(str49, "Device firmware info"),
    SecretCodes("*#*#44336#*#*", "Displays Build time & change list number")
)

val secretCodesList_asus = listOf(
    SecretCodes("*#06#", "Display IMEI number."),
    SecretCodes(str66, "Display information about Android Phone, Battery and Usage statistics"),
    SecretCodes(str54, "Android Device Touch-Screen test"),
    SecretCodes("*#*#7780#*#*", "Reset Android device. Erase all your device data like photos, apps, and settings, etc."),
    SecretCodes("*#*#225#*#* ", "Calendar Info"),
    SecretCodes(str43, "Android Device Ram version"),
    SecretCodes(str60, "Displays Wi-Fi Mac-address"),
    SecretCodes(str66, "Display information"),
    SecretCodes("*#*#64663#*#*", "QC Test"),
    SecretCodes("*#*#232339#*#* ", "FTA hardware version"),
    SecretCodes(str64, "FTA hardware version"),
    SecretCodes("*#*#97#*#*", "Language and Keyboard settings in Vivo Y51L"),
    SecretCodes("*#*#46*#*#", "Reset Sim in Vivo Y51L"),
    SecretCodes("*#301279#", "HSDPA, Control Menu "),
    SecretCodes(str71, "Quick GPS Test"),
    SecretCodes(str54, "Android Device Touch-Screen test"),
    SecretCodes(str46, "Android Device LCD test"),
    SecretCodes(str50, "Proximity sensor test"),
    SecretCodes(str44, "Enables Subset lock"),
    SecretCodes("*#*#225#*#*", "Events calendar."),
    SecretCodes(str26, "Debug information for Google Play service."),
    SecretCodes(str58, "Device Bluetooth test"),
    SecretCodes(str38, "USB logging control "),
    SecretCodes(str60, "Displays Wi-Fi Mac-address"),
    SecretCodes(str62, "FTA Software version"),
    SecretCodes(str64, "FTA Hardware version"),
    SecretCodes(str56, "Disables SIM lock"),
    SecretCodes("7465625*746*Code#", str65),
    SecretCodes(str49, "Device firmware info"),
    SecretCodes(str48, "Packet Loopback test")
)

val secretCodesList_honor = listOf(
    SecretCodes(str54, "Android Device Touch-Screen test"),
    SecretCodes("*#*#0289#*#*", "Device Audio test"),
    SecretCodes(str67, "Display information about Android Phone, Battery and Usage statistics"),
    SecretCodes(str73, "Android Device Ram version"),
    SecretCodes("*#06# ", "Displays IMEI number"),
    SecretCodes(str60, "Displays Wi-Fi Mac-address"),
    SecretCodes("*#*#7780#*#*", "Reset Android device. Erase all your device data like photos, apps, and settings, etc."),
    SecretCodes("*#000000#", "Use this code to enter your Honor’s Service Menu"),
    SecretCodes("*#*#64663#*#*", "Using following code, will master reset your Honor device when your sim card is inserted."),
    SecretCodes("###337*07#", "FTA hardware version"),
    SecretCodes(str64, "FTA hardware version"),
    SecretCodes("*#301279#", "HSDPA, Control Menu "),
    SecretCodes(str71, "Quick GPS Test"),
    SecretCodes(str54, "Android Device Touch-Screen test"),
    SecretCodes(str46, "Android Device LCD test"),
    SecretCodes(str50, "Proximity sensor test"),
    SecretCodes(str44, "Enables Subset lock"),
    SecretCodes("*#*#225#*#*", "Events calendar."),
    SecretCodes(str26, "Debug information for Google Play service."),
    SecretCodes(str58, "Device Bluetooth test"),
    SecretCodes(str38, "USB logging control "),
    SecretCodes(str60, "Displays Wi-Fi Mac-address"),
    SecretCodes(str62, "FTA Software version"),
    SecretCodes(str64, "FTA Hardware version"),
    SecretCodes(str74, "Disables SIM lock"),
    SecretCodes("7465625*746*Code#", str70),
    SecretCodes(str49, "Device firmware info"),
    SecretCodes(str76, "Packet Loopback test")
)

val secretCodesList_iphone = listOf(
    SecretCodes("*3001#12345#*", "Field test mode."),
    SecretCodes("*#5005*7672#", "SMS center number."),
    SecretCodes("*3370#", "Turn off or on EFR."),
    SecretCodes(str72, "Display IMEI number."),
    SecretCodes("*#31#", "Hide your number on call option."),
    SecretCodes("*#225#", "Find out your current mobile account balance."),
    SecretCodes("*#777#", "Find out prepaid mobile account balance."),
    SecretCodes("*#61#", "Number of missed calls."),
    SecretCodes("*#21#", "Call forwarding status."),
    SecretCodes("*#67#", "Call forwarding number."),
    SecretCodes("*#33#", "Find out what mobile services are disabled on your phone.")
)

val secretCodes_realme = listOf(
    SecretCodes(str79, str77),
    SecretCodes("*#31#", "Hide your number on call option."),
    SecretCodes("*#225#", "Find out your current mobile account balance."),
    SecretCodes("*#777#", "Find out prepaid mobile account balance."),
    SecretCodes("*#61#", "Number of missed calls."),
    SecretCodes("*#21#", "Call forwarding status."),
    SecretCodes("*#67#", "Call forwarding number."),
    SecretCodes("*#33#", "Find out what mobile services are disabled on your phone."),
    SecretCodes(str81, "Check if call waiting is on or off."),
    SecretCodes(str81, "Turn on call waiting."),
    SecretCodes(str81, "Turn off call waiting."),
    SecretCodes("*#646#", "Check minutes left on contract."),
    SecretCodes("*3001#12345#*", "Field test mode."),
    SecretCodes("*#5005*7672#", "SMS center number."),
    SecretCodes("*3370#", "Turn off or on EFR."),
    SecretCodes(str81, "Check if call waiting is on or off."),
    SecretCodes(str81, "Turn on call waiting."),
    SecretCodes(str81, "Turn off call waiting."),
    SecretCodes("*#646#", "Check minutes left on contract.")
)

val secretCodes_zte = listOf(
    SecretCodes(str54, "Android Device Touch-Screen test"),
    SecretCodes("*#*#0289#*#*", "Device Audio test"),
    SecretCodes("*#21#", "Call forwarding status."),
    SecretCodes("*#67#", "Call forwarding number."),
    SecretCodes("*#33#", "Find out what mobile services are disabled on your phone."),
    SecretCodes(str82, "Check if call waiting is on or off."),
    SecretCodes(str82, "Turn on call waiting."),
    SecretCodes(str82, "Turn off call waiting."),
    SecretCodes(str67, "Display information about Android Phone, Battery and Usage statistics"),
    SecretCodes(str73, "Android Device Ram version"),
    SecretCodes(str79, str77),
    SecretCodes("*#31#", "Hide your number on call option."),
    SecretCodes("*#225#", "Find out your current mobile account balance."),
    SecretCodes("*#777#", "Find out prepaid mobile account balance."),
    SecretCodes("*#61#", "Number of missed calls."),
    SecretCodes("*#646#", "Check minutes left on contract."),
    SecretCodes("*3001#12345#*", "Field test mode."),
    SecretCodes("*#5005*7672#", "SMS center number."),
    SecretCodes("*3370#", "Turn off or on EFR."),
    SecretCodes(str82, "Check if call waiting is on or off."),
    SecretCodes("*#646#", "Check minutes left on contract.")
)

val secretCodes_oneplus= listOf(
    SecretCodes("*#7465625*77*#", "Insert Operator Lock Keycode."),
    SecretCodes("*7465625*638*#", "Configure Network Lock MCC/MNC."),
    SecretCodes("*#7465625*638*#", "Insert Network Keycode."),
    SecretCodes("*#0228#", "ADC Reading."),
    SecretCodes("*#7465625*27*#", "Insert Content Provider Keycode."),
    SecretCodes("*#225#", "Find out your current mobile account balance."),
    SecretCodes("*#777#", "Find out prepaid mobile account balance."),
    SecretCodes("*#61#", "Number of missed calls."),
    SecretCodes("*#646#", "Check minutes left on contract."),
    SecretCodes("*3001#12345#*", "Field test mode."),
    SecretCodes("*#5005*7672#", "SMS center number."),
    SecretCodes("*3370#", "Turn off or on EFR."),
    SecretCodes(str82, "Check if call waiting is on or off."),
    SecretCodes("*#646#", "Check minutes left on contract."),
    SecretCodes(str54, "Android Device Touch-Screen test"),
    SecretCodes("*#*#0289#*#*", "Device Audio test"),
    SecretCodes("*#21#", "Call forwarding status."),
    SecretCodes("*#67#", "Call forwarding number."),
    SecretCodes("*#33#", "Find out what mobile services are disabled on your phone."),
    SecretCodes(str82, "Check if call waiting is on or off."),
    SecretCodes(str82, "Turn on call waiting."),
    SecretCodes(str82, "Turn off call waiting."),
    SecretCodes(str67, "Display information about Android Phone, Battery and Usage statistics"),
    SecretCodes(str73, "Android Device Ram version"),
    SecretCodes(str79, str77),
    SecretCodes("*#31#", "Hide your number on call option.")
)

val secretCodesList_plam = listOf(
    SecretCodes(str79, str77),
    SecretCodes("*#7465625*77*#", "Insert Operator Lock Keycode."),
    SecretCodes("*7465625*638*#", "Configure Network Lock MCC/MNC."),
    SecretCodes(str82, "Check if call waiting is on or off."),
    SecretCodes("*#646#", "Check minutes left on contract."),
    SecretCodes(str54, "Android Device Touch-Screen test"),
    SecretCodes("*#*#0289#*#*", "Device Audio test"),
    SecretCodes("*#21#", "Call forwarding status."),
    SecretCodes("*#67#", "Call forwarding number."),
    SecretCodes("*#33#", "Find out what mobile services are disabled on your phone."),
    SecretCodes(str82, "Check if call waiting is on or off."),
    SecretCodes(str82, "Turn on call waiting."),
    SecretCodes(str82, "Turn off call waiting."),
    SecretCodes(str67, "Display information about Android Phone, Battery and Usage statistics"),
    SecretCodes(str73, "Android Device Ram version"),
    SecretCodes("*#7465625*638*#", "Insert Network Keycode."),
    SecretCodes("*#0228#", "ADC Reading."),
    SecretCodes("*#7465625*27*#", "Insert Content Provider Keycode."),
    SecretCodes("*#225#", "Find out your current mobile account balance."),
    SecretCodes("*#777#", "Find out prepaid mobile account balance."),
    SecretCodes("*#61#", "Number of missed calls."),
    SecretCodes("*#646#", "Check minutes left on contract."),
    SecretCodes("*3001#12345#*", "Field test mode."),
    SecretCodes("*#5005*7672#", "SMS center number."),
    SecretCodes("*3370#", "Turn off or on EFR."),
    SecretCodes("*#31#", "Hide your number on call option.")
)

val secretCodes_amol = listOf(
    SecretCodes(str79, str77),
    SecretCodes("*3001#12345#*", "Field Mode"),
    SecretCodes("*#0*#", "General Test Mode"),
    SecretCodes(str79, "Display your IMEI"),
    SecretCodes("*#67#", "Check Your Call Forwarding"),
    SecretCodes("*#61#", "Get Even More Info on Call Forwarding"),
    SecretCodes("*646#", "Check Your Available Minutes"),
    SecretCodes("*225#", "Check Your Bill Balance"),
    SecretCodes("#31#", "Hide Your Phone From Caller ID"),
    SecretCodes("*3282#", "Check Your Billing Cycle"),
    SecretCodes("*5005*7672#", "SMS Message Center"),
    SecretCodes("*43#", "Activate Call Waiting"),
    SecretCodes("*#7353#", "Quick Test Menu (Samsung Galaxy Only)"),
    SecretCodes("*#1234#", "Firmware (Samsung Galaxy Only)"),
    SecretCodes(str82, "Turn on call waiting."),
    SecretCodes(str82, "Turn off call waiting."),
    SecretCodes(str67, "Display information about Android Phone, Battery and Usage statistics"),
    SecretCodes(str73, "Android Device Ram version"),
    SecretCodes("*#7465625*638*#", "Insert Network Keycode.")
)


val secretCodesList_bq = listOf(
    SecretCodes(str79, str77),
    SecretCodes(str71, "Quick GPS Test"),
    SecretCodes("*#*#1575#*#*", "A Different Type GPS Test"),
    SecretCodes(str46, "Android Device LCD display test"),
    SecretCodes("*#*#0842#*#*", "Vibration and Backlight test"),
    SecretCodes(str54, "Android Device Touch-Screen test"),
    SecretCodes(str50, "Proximity sensor test"),
    SecretCodes("*#*#7262626#*#*", "Device Field test"),
    SecretCodes(str58, "Device Wireless Lan Test"),
    SecretCodes("*#*#526#*#*", "Device Wireless Lan Test"),
    SecretCodes("*#*#0289#*#*", "Device Audio test"),
    SecretCodes("*#*#0673#*#*", "Device Audio test"),
    SecretCodes(str76, "Device Bluetooth test"),
    SecretCodes("*#*#0283#*#*", "Packet Loopback test"),
    SecretCodes(str67, "Display information about Android Phone, Battery and Usage statistics"),
    SecretCodes(str67, "Shows complete information about the Device camera"),
    SecretCodes("*#*#34971539#*#*", "The displays touch-screen version of Android device"),
    SecretCodes("*#*#2663#*#*", "Android Device Ram version"),
    SecretCodes("*#06#", "Displays IMEI number"),
    SecretCodes(str73, "Displays Bluetooth device address"),
    SecretCodes("*#*#232337#*#", "Displays Wi-Fi Mac-address"),
    SecretCodes(str60, "PDA and Device firmware info"),
    SecretCodes(str75, "FTA Software version"),
    SecretCodes(str83, "FTA Hardware version"),
    SecretCodes(str80, "FTA Hardware version"),
    SecretCodes("*#*#44336#*#*", "Displays Build time and change list number")
)

val secretCodes_imobile = listOf(
    SecretCodes(str67, "Shows Information about phone"),
    SecretCodes("*#*#7780#*#*", "Factory Reset your smartphone."),
    SecretCodes(str61, "Hard Reset & Reinstall the Firmware."),
    SecretCodes(str63, "Displays information about the camera."),
    SecretCodes("*#*#7594#*#*", "Changes the power button behavior."),
    SecretCodes("*#*#273283*255*663282*#*#*", "Back up all media files stored on your device."),
    SecretCodes("*#*#197328640#*#*", "This opens the Service Mode."),
    SecretCodes(str58, "Test the state of Wireless LAN"),
    SecretCodes(str60, "Display the MAC Address of WiFi"),
    SecretCodes(str76, "Test the Bluetooth sensor of your device."),
    SecretCodes("*#*#232337#*#", "This Shows the Bluetooth Device Address."),
    SecretCodes("*#*#44336#*#*", "Display the Build time."),
    SecretCodes(str75, "Displays the PDA and Phone Firmware Info"),
    SecretCodes(str50, "Tests the Proximity Sensor"),
    SecretCodes(str71, "This Tests the GPS functionality"),
    SecretCodes(str46, "Test the phone’s LCD Display"),
    SecretCodes("*#*#0673#*#*", "Test the Audio of your smartphone"),
    SecretCodes("*#*#0842#*#*", "Tests the Vibration and Backlight"),
    SecretCodes("*#*#8255#*#*", "Google Talk Service Monitoring."),
    SecretCodes("*#*#2663#*#*", "Displays the Touchscreen version."),
    SecretCodes(str54, "Allows you to perform a touch screen test")
)


val secretCodesList_leeco = listOf(
    SecretCodes(str73, "Displays RAM information"),
    SecretCodes(str85, "Displays the software version."),
    SecretCodes(str84, "Displays the hardware version."),
    SecretCodes(str79, "Displays the phone’s IMEI number."),
    SecretCodes("*#2263#", "Displays the RF band selection"),
    SecretCodes("*#9090#", "Shows the Diagnostic configuration."),
    SecretCodes("*#7284#", "This opens the USB 12C mode control."),
    SecretCodes(str78, "This shows the USB logging control."),
    SecretCodes("*#745#", "This opens the RIL dump menu."),
    SecretCodes("*#746#", "This opens the Debug dump menu."),
    SecretCodes("*#9900#", "Opens the System dump mode."),
    SecretCodes("*#03#", "NAND flash serial number"),
    SecretCodes("*#3214789#", "Shows the GCF mode Status"),
    SecretCodes("*#7353#", "Opens the Quick test menu"),
    SecretCodes("*#0782#", "Performs a Real-time clock test."),
    SecretCodes("*#0589#", "Performs a Light sensor test"),
    SecretCodes("##7764726", "Opens the hidden service menu in Motorola DROID phones"),
    SecretCodes("1809#*990#", "Opens the LG Optimus 2x hidden service menu"),
    SecretCodes("3845#*920#", "Opens the LG Optimus 3D hidden service menu"),
    SecretCodes("*#0*#", "Opens the service menu in Galaxy S3."),
    SecretCodes("*#67#", "Displays your Call forwarding"),
    SecretCodes("*#61#", "Displays additional call forwarding information"),
    SecretCodes("*646#", "Displays Available minutes (AT&T)")
)
